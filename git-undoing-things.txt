UNDOING THINGS:

Resetting staged files and commits

1. Resetting Staged Files

    git reset


2. Resetting a commit that has NOT been pushed

  Method 1: Undo commit and keep all files staged

    git reset --soft HEAD~;

    This is most often used to make a few changes to your latest commit and/or fix your commit message. Leaves working tree as it was before reset.

    --soft does not touch the index file or the working tree at all (but resets the head to the previous commit). This leaves all your changed files Changes to be committed, as git status would put it.

  Method 2: Undo commit and unstage all files

    git reset HEAD~;

    git reset --mixed HEAD~;

    --mixed will reset the index but not the working tree (i.e., the changed files are preserved but not marked for commit) and reports what has not been updated. This is the default action.

  Method 3: Undo the commit and completely remove all changes

    git reset --hard HEAD~;

    --hard resets the index and working tree. Any changes to tracked files in the working tree since the previous commit are discarded.


3. Untracking a file or directory without removing it from your local file system (such as if you don't want to make a repo private or delete it and re-create it, but you've forgotten to .gitignore something after you've already pushed the empty file to a remote, or if what's in the file that's already been pushed to a remote isn't sensitive information)?

  Individual file: git -rm --cached <filename>

  Individual directory: git -rm --cached -r <filename>